<class>
<keyword>class</keyword>
<identifier>Square</identifier>
<symbol>{<symbol>
<classVarDec>
<keyword>field</keyword>
<keyword>int</keyword>
<keyword>x</keyword>
<symbol>,</symbol>
<keyword>y</keyword>
<symbol>;</symbol>
</classVarDec>
<classVarDec>
<keyword>field</keyword>
<keyword>int</keyword>
<keyword>size</keyword>
<symbol>;</symbol>
</classVarDec>
<subroutineDec>
<keyword>constructor</keyword>
<identifier>Square</identifier>
<identifier>new</identifier>
<symbol>(</symbol>
<parameterList>
<keyword>int</keyword>
<identifier>Ax</identifier>
<symbol>,</symbol>
<keyword>int</keyword>
<identifier>Ay</identifier>
<symbol>,</symbol>
<keyword>int</keyword>
<identifier>Asize</identifier>
</parameterList>
<symbol>)</symbol>
<subroutineBody>
<symbol>{</symbol>
<statements>
<letStatement>
<keyword>let</keyword>
<identifier>x</identifier>
<symbol>=</symbol>
<expression>
<term>
<identifier>Ax</identifier>
</term>
</expression>
<symbol>;</symbol>
</letStatement>
<letStatement>
<keyword>let</keyword>
<identifier>y</identifier>
<symbol>=</symbol>
<expression>
<term>
<identifier>Ay</identifier>
</term>
</expression>
<symbol>;</symbol>
</letStatement>
<letStatement>
<keyword>let</keyword>
<identifier>size</identifier>
<symbol>=</symbol>
<expression>
<term>
<identifier>Asize</identifier>
</term>
</expression>
<symbol>;</symbol>
</letStatement>
<doStatement>
<keyword>do</keyword>
<identifier>draw</identifier>
<symbol>(</symbol>
<expressionList>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<returnStatement>
<keyword>return</keyword>
<keyword>return</keyword>
<expression>
<term>
<identifier>this</identifier>
</term>
</expression>
<symbol>;</return>
</returnStatement>
</statements>
</subroutineBody>
<subroutineDec>
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>dispose</identifier>
<symbol>(</symbol>
</parameterList>
<symbol>)</symbol>
<subroutineBody>
<symbol>{</symbol>
<statements>
<doStatement>
<keyword>do</keyword>
<identifier>Memory</identifier>
<symbol>.</symbol>
<identifier>deAlloc</identifier>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<identifier>this</identifier>
</term>
</expression>
<symbol>,</symbol>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<returnStatement>
<keyword>return</keyword>
</returnStatement>
</statements>
</subroutineBody>
<subroutineDec>
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>draw</identifier>
<symbol>(</symbol>
</parameterList>
<symbol>)</symbol>
<subroutineBody>
<symbol>{</symbol>
<statements>
<doStatement>
<keyword>do</keyword>
<identifier>Screen</identifier>
<symbol>.</symbol>
<identifier>setColor</identifier>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<identifier>true</identifier>
</term>
</expression>
<symbol>,</symbol>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<doStatement>
<keyword>do</keyword>
<identifier>Screen</identifier>
<symbol>.</symbol>
<identifier>drawRectangle</identifier>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<identifier>x</identifier>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<identifier>y</identifier>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<identifier>x</identifier>
</term>
<symbol>+<symbol>
<identifier>size</identifier>
</expression>
<symbol>,</symbol>
<expression>
<term>
<identifier>y</identifier>
</term>
<symbol>+<symbol>
<identifier>size</identifier>
</expression>
<symbol>,</symbol>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<returnStatement>
<keyword>return</keyword>
</returnStatement>
</statements>
</subroutineBody>
<subroutineDec>
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>erase</identifier>
<symbol>(</symbol>
</parameterList>
<symbol>)</symbol>
<subroutineBody>
<symbol>{</symbol>
<statements>
<doStatement>
<keyword>do</keyword>
<identifier>Screen</identifier>
<symbol>.</symbol>
<identifier>setColor</identifier>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<identifier>false</identifier>
</term>
</expression>
<symbol>,</symbol>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<doStatement>
<keyword>do</keyword>
<identifier>Screen</identifier>
<symbol>.</symbol>
<identifier>drawRectangle</identifier>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<identifier>x</identifier>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<identifier>y</identifier>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<identifier>x</identifier>
</term>
<symbol>+<symbol>
<identifier>size</identifier>
</expression>
<symbol>,</symbol>
<expression>
<term>
<identifier>y</identifier>
</term>
<symbol>+<symbol>
<identifier>size</identifier>
</expression>
<symbol>,</symbol>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<returnStatement>
<keyword>return</keyword>
</returnStatement>
</statements>
</subroutineBody>
<subroutineDec>
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>incSize</identifier>
<symbol>(</symbol>
</parameterList>
<symbol>)</symbol>
<subroutineBody>
<symbol>{</symbol>
<statements>
<ifStatement>
<keyword>if</keyword>
<symbol>(</symbol>
<expression>
<term>
<symbol>(</symbol>
<expression>
<term>
<symbol>(</symbol>
<expression>
<term>
<identifier>y</identifier>
</term>
<symbol>+<symbol>
<identifier>size</identifier>
</expression>
<symbol>)</symbol>
</term>
<symbol><<symbol>
<integerConstant>254</integerConstant>
</expression>
<symbol>)</symbol>
</term>
<symbol>&<symbol>
<symbol>(</symbol>
<expression>
<term>
<symbol>(</symbol>
<expression>
<term>
<identifier>x</identifier>
</term>
<symbol>+<symbol>
<identifier>size</identifier>
</expression>
<symbol>)</symbol>
</term>
<symbol><<symbol>
<integerConstant>510</integerConstant>
</expression>
<symbol>)</symbol>
</expression>
<symbol>)</symbol>
<symbol>{</symbol>
<statements>
<doStatement>
<keyword>do</keyword>
<identifier>erase</identifier>
<symbol>(</symbol>
<expressionList>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<letStatement>
<keyword>let</keyword>
<identifier>size</identifier>
<symbol>=</symbol>
<expression>
<term>
<identifier>size</identifier>
</term>
<symbol>+<symbol>
<integerConstant>2</integerConstant>
</expression>
<symbol>;</symbol>
</letStatement>
<doStatement>
<keyword>do</keyword>
<identifier>draw</identifier>
<symbol>(</symbol>
<expressionList>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
</statements>
<statements>
<doStatement>
<keyword>do</keyword>
<identifier>erase</identifier>
<symbol>(</symbol>
<expressionList>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<letStatement>
<keyword>let</keyword>
<identifier>size</identifier>
<symbol>=</symbol>
<expression>
<term>
<identifier>size</identifier>
</term>
<symbol>+<symbol>
<integerConstant>2</integerConstant>
</expression>
<symbol>;</symbol>
</letStatement>
<doStatement>
<keyword>do</keyword>
<identifier>draw</identifier>
<symbol>(</symbol>
<expressionList>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
</statements>
<symbol>}</symbol>
</ifStatement>
</statements>
</subroutineBody>
<subroutineDec>
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>decSize</identifier>
<symbol>(</symbol>
</parameterList>
<symbol>)</symbol>
<subroutineBody>
<symbol>{</symbol>
<statements>
<ifStatement>
<keyword>if</keyword>
<symbol>(</symbol>
<expression>
<term>
<identifier>size</identifier>
</term>
<symbol>><symbol>
<integerConstant>2</integerConstant>
</expression>
<symbol>)</symbol>
<symbol>{</symbol>
<statements>
<doStatement>
<keyword>do</keyword>
<identifier>erase</identifier>
<symbol>(</symbol>
<expressionList>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<letStatement>
<keyword>let</keyword>
<identifier>size</identifier>
<symbol>=</symbol>
<expression>
<term>
<identifier>size</identifier>
</term>
<symbol>-<symbol>
<integerConstant>2</integerConstant>
</expression>
<symbol>;</symbol>
</letStatement>
<doStatement>
<keyword>do</keyword>
<identifier>draw</identifier>
<symbol>(</symbol>
<expressionList>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
</statements>
<statements>
<doStatement>
<keyword>do</keyword>
<identifier>erase</identifier>
<symbol>(</symbol>
<expressionList>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<letStatement>
<keyword>let</keyword>
<identifier>size</identifier>
<symbol>=</symbol>
<expression>
<term>
<identifier>size</identifier>
</term>
<symbol>-<symbol>
<integerConstant>2</integerConstant>
</expression>
<symbol>;</symbol>
</letStatement>
<doStatement>
<keyword>do</keyword>
<identifier>draw</identifier>
<symbol>(</symbol>
<expressionList>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
</statements>
<symbol>}</symbol>
</ifStatement>
</statements>
</subroutineBody>
<subroutineDec>
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>moveUp</identifier>
<symbol>(</symbol>
</parameterList>
<symbol>)</symbol>
<subroutineBody>
<symbol>{</symbol>
<statements>
<ifStatement>
<keyword>if</keyword>
<symbol>(</symbol>
<expression>
<term>
<identifier>y</identifier>
</term>
<symbol>><symbol>
<integerConstant>1</integerConstant>
</expression>
<symbol>)</symbol>
<symbol>{</symbol>
<statements>
<doStatement>
<keyword>do</keyword>
<identifier>Screen</identifier>
<symbol>.</symbol>
<identifier>setColor</identifier>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<identifier>false</identifier>
</term>
</expression>
<symbol>,</symbol>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<doStatement>
<keyword>do</keyword>
<identifier>Screen</identifier>
<symbol>.</symbol>
<identifier>drawRectangle</identifier>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<identifier>x</identifier>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<symbol>(</symbol>
<expression>
<term>
<identifier>y</identifier>
</term>
<symbol>+<symbol>
<identifier>size</identifier>
</expression>
<symbol>)</symbol>
</term>
<symbol>-<symbol>
<integerConstant>1</integerConstant>
</expression>
<symbol>,</symbol>
<expression>
<term>
<identifier>x</identifier>
</term>
<symbol>+<symbol>
<identifier>size</identifier>
</expression>
<symbol>,</symbol>
<expression>
<term>
<identifier>y</identifier>
</term>
<symbol>+<symbol>
<identifier>size</identifier>
</expression>
<symbol>,</symbol>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<letStatement>
<keyword>let</keyword>
<identifier>y</identifier>
<symbol>=</symbol>
<expression>
<term>
<identifier>y</identifier>
</term>
<symbol>-<symbol>
<integerConstant>2</integerConstant>
</expression>
<symbol>;</symbol>
</letStatement>
<doStatement>
<keyword>do</keyword>
<identifier>Screen</identifier>
<symbol>.</symbol>
<identifier>setColor</identifier>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<identifier>true</identifier>
</term>
</expression>
<symbol>,</symbol>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<doStatement>
<keyword>do</keyword>
<identifier>Screen</identifier>
<symbol>.</symbol>
<identifier>drawRectangle</identifier>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<identifier>x</identifier>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<identifier>y</identifier>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<identifier>x</identifier>
</term>
<symbol>+<symbol>
<identifier>size</identifier>
</expression>
<symbol>,</symbol>
<expression>
<term>
<identifier>y</identifier>
</term>
<symbol>+<symbol>
<integerConstant>1</integerConstant>
</expression>
<symbol>,</symbol>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
</statements>
<statements>
<doStatement>
<keyword>do</keyword>
<identifier>Screen</identifier>
<symbol>.</symbol>
<identifier>setColor</identifier>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<identifier>false</identifier>
</term>
</expression>
<symbol>,</symbol>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<doStatement>
<keyword>do</keyword>
<identifier>Screen</identifier>
<symbol>.</symbol>
<identifier>drawRectangle</identifier>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<identifier>x</identifier>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<symbol>(</symbol>
<expression>
<term>
<identifier>y</identifier>
</term>
<symbol>+<symbol>
<identifier>size</identifier>
</expression>
<symbol>)</symbol>
</term>
<symbol>-<symbol>
<integerConstant>1</integerConstant>
</expression>
<symbol>,</symbol>
<expression>
<term>
<identifier>x</identifier>
</term>
<symbol>+<symbol>
<identifier>size</identifier>
</expression>
<symbol>,</symbol>
<expression>
<term>
<identifier>y</identifier>
</term>
<symbol>+<symbol>
<identifier>size</identifier>
</expression>
<symbol>,</symbol>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<letStatement>
<keyword>let</keyword>
<identifier>y</identifier>
<symbol>=</symbol>
<expression>
<term>
<identifier>y</identifier>
</term>
<symbol>-<symbol>
<integerConstant>2</integerConstant>
</expression>
<symbol>;</symbol>
</letStatement>
<doStatement>
<keyword>do</keyword>
<identifier>Screen</identifier>
<symbol>.</symbol>
<identifier>setColor</identifier>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<identifier>true</identifier>
</term>
</expression>
<symbol>,</symbol>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<doStatement>
<keyword>do</keyword>
<identifier>Screen</identifier>
<symbol>.</symbol>
<identifier>drawRectangle</identifier>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<identifier>x</identifier>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<identifier>y</identifier>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<identifier>x</identifier>
</term>
<symbol>+<symbol>
<identifier>size</identifier>
</expression>
<symbol>,</symbol>
<expression>
<term>
<identifier>y</identifier>
</term>
<symbol>+<symbol>
<integerConstant>1</integerConstant>
</expression>
<symbol>,</symbol>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
</statements>
<symbol>}</symbol>
</ifStatement>
</statements>
</subroutineBody>
<subroutineDec>
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>moveDown</identifier>
<symbol>(</symbol>
</parameterList>
<symbol>)</symbol>
<subroutineBody>
<symbol>{</symbol>
<statements>
<ifStatement>
<keyword>if</keyword>
<symbol>(</symbol>
<expression>
<term>
<symbol>(</symbol>
<expression>
<term>
<identifier>y</identifier>
</term>
<symbol>+<symbol>
<identifier>size</identifier>
</expression>
<symbol>)</symbol>
</term>
<symbol><<symbol>
<integerConstant>254</integerConstant>
</expression>
<symbol>)</symbol>
<symbol>{</symbol>
<statements>
<doStatement>
<keyword>do</keyword>
<identifier>Screen</identifier>
<symbol>.</symbol>
<identifier>setColor</identifier>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<identifier>false</identifier>
</term>
</expression>
<symbol>,</symbol>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<doStatement>
<keyword>do</keyword>
<identifier>Screen</identifier>
<symbol>.</symbol>
<identifier>drawRectangle</identifier>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<identifier>x</identifier>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<identifier>y</identifier>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<identifier>x</identifier>
</term>
<symbol>+<symbol>
<identifier>size</identifier>
</expression>
<symbol>,</symbol>
<expression>
<term>
<identifier>y</identifier>
</term>
<symbol>+<symbol>
<integerConstant>1</integerConstant>
</expression>
<symbol>,</symbol>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<letStatement>
<keyword>let</keyword>
<identifier>y</identifier>
<symbol>=</symbol>
<expression>
<term>
<identifier>y</identifier>
</term>
<symbol>+<symbol>
<integerConstant>2</integerConstant>
</expression>
<symbol>;</symbol>
</letStatement>
<doStatement>
<keyword>do</keyword>
<identifier>Screen</identifier>
<symbol>.</symbol>
<identifier>setColor</identifier>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<identifier>true</identifier>
</term>
</expression>
<symbol>,</symbol>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<doStatement>
<keyword>do</keyword>
<identifier>Screen</identifier>
<symbol>.</symbol>
<identifier>drawRectangle</identifier>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<identifier>x</identifier>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<symbol>(</symbol>
<expression>
<term>
<identifier>y</identifier>
</term>
<symbol>+<symbol>
<identifier>size</identifier>
</expression>
<symbol>)</symbol>
</term>
<symbol>-<symbol>
<integerConstant>1</integerConstant>
</expression>
<symbol>,</symbol>
<expression>
<term>
<identifier>x</identifier>
</term>
<symbol>+<symbol>
<identifier>size</identifier>
</expression>
<symbol>,</symbol>
<expression>
<term>
<identifier>y</identifier>
</term>
<symbol>+<symbol>
<identifier>size</identifier>
</expression>
<symbol>,</symbol>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
</statements>
<statements>
<doStatement>
<keyword>do</keyword>
<identifier>Screen</identifier>
<symbol>.</symbol>
<identifier>setColor</identifier>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<identifier>false</identifier>
</term>
</expression>
<symbol>,</symbol>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<doStatement>
<keyword>do</keyword>
<identifier>Screen</identifier>
<symbol>.</symbol>
<identifier>drawRectangle</identifier>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<identifier>x</identifier>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<identifier>y</identifier>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<identifier>x</identifier>
</term>
<symbol>+<symbol>
<identifier>size</identifier>
</expression>
<symbol>,</symbol>
<expression>
<term>
<identifier>y</identifier>
</term>
<symbol>+<symbol>
<integerConstant>1</integerConstant>
</expression>
<symbol>,</symbol>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<letStatement>
<keyword>let</keyword>
<identifier>y</identifier>
<symbol>=</symbol>
<expression>
<term>
<identifier>y</identifier>
</term>
<symbol>+<symbol>
<integerConstant>2</integerConstant>
</expression>
<symbol>;</symbol>
</letStatement>
<doStatement>
<keyword>do</keyword>
<identifier>Screen</identifier>
<symbol>.</symbol>
<identifier>setColor</identifier>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<identifier>true</identifier>
</term>
</expression>
<symbol>,</symbol>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<doStatement>
<keyword>do</keyword>
<identifier>Screen</identifier>
<symbol>.</symbol>
<identifier>drawRectangle</identifier>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<identifier>x</identifier>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<symbol>(</symbol>
<expression>
<term>
<identifier>y</identifier>
</term>
<symbol>+<symbol>
<identifier>size</identifier>
</expression>
<symbol>)</symbol>
</term>
<symbol>-<symbol>
<integerConstant>1</integerConstant>
</expression>
<symbol>,</symbol>
<expression>
<term>
<identifier>x</identifier>
</term>
<symbol>+<symbol>
<identifier>size</identifier>
</expression>
<symbol>,</symbol>
<expression>
<term>
<identifier>y</identifier>
</term>
<symbol>+<symbol>
<identifier>size</identifier>
</expression>
<symbol>,</symbol>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
</statements>
<symbol>}</symbol>
</ifStatement>
</statements>
</subroutineBody>
<subroutineDec>
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>moveLeft</identifier>
<symbol>(</symbol>
</parameterList>
<symbol>)</symbol>
<subroutineBody>
<symbol>{</symbol>
<statements>
<ifStatement>
<keyword>if</keyword>
<symbol>(</symbol>
<expression>
<term>
<identifier>x</identifier>
</term>
<symbol>><symbol>
<integerConstant>1</integerConstant>
</expression>
<symbol>)</symbol>
<symbol>{</symbol>
<statements>
<doStatement>
<keyword>do</keyword>
<identifier>Screen</identifier>
<symbol>.</symbol>
<identifier>setColor</identifier>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<identifier>false</identifier>
</term>
</expression>
<symbol>,</symbol>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<doStatement>
<keyword>do</keyword>
<identifier>Screen</identifier>
<symbol>.</symbol>
<identifier>drawRectangle</identifier>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<symbol>(</symbol>
<expression>
<term>
<identifier>x</identifier>
</term>
<symbol>+<symbol>
<identifier>size</identifier>
</expression>
<symbol>)</symbol>
</term>
<symbol>-<symbol>
<integerConstant>1</integerConstant>
</expression>
<symbol>,</symbol>
<expression>
<term>
<identifier>y</identifier>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<identifier>x</identifier>
</term>
<symbol>+<symbol>
<identifier>size</identifier>
</expression>
<symbol>,</symbol>
<expression>
<term>
<identifier>y</identifier>
</term>
<symbol>+<symbol>
<identifier>size</identifier>
</expression>
<symbol>,</symbol>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<letStatement>
<keyword>let</keyword>
<identifier>x</identifier>
<symbol>=</symbol>
<expression>
<term>
<identifier>x</identifier>
</term>
<symbol>-<symbol>
<integerConstant>2</integerConstant>
</expression>
<symbol>;</symbol>
</letStatement>
<doStatement>
<keyword>do</keyword>
<identifier>Screen</identifier>
<symbol>.</symbol>
<identifier>setColor</identifier>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<identifier>true</identifier>
</term>
</expression>
<symbol>,</symbol>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<doStatement>
<keyword>do</keyword>
<identifier>Screen</identifier>
<symbol>.</symbol>
<identifier>drawRectangle</identifier>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<identifier>x</identifier>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<identifier>y</identifier>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<identifier>x</identifier>
</term>
<symbol>+<symbol>
<integerConstant>1</integerConstant>
</expression>
<symbol>,</symbol>
<expression>
<term>
<identifier>y</identifier>
</term>
<symbol>+<symbol>
<identifier>size</identifier>
</expression>
<symbol>,</symbol>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
</statements>
<statements>
<doStatement>
<keyword>do</keyword>
<identifier>Screen</identifier>
<symbol>.</symbol>
<identifier>setColor</identifier>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<identifier>false</identifier>
</term>
</expression>
<symbol>,</symbol>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<doStatement>
<keyword>do</keyword>
<identifier>Screen</identifier>
<symbol>.</symbol>
<identifier>drawRectangle</identifier>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<symbol>(</symbol>
<expression>
<term>
<identifier>x</identifier>
</term>
<symbol>+<symbol>
<identifier>size</identifier>
</expression>
<symbol>)</symbol>
</term>
<symbol>-<symbol>
<integerConstant>1</integerConstant>
</expression>
<symbol>,</symbol>
<expression>
<term>
<identifier>y</identifier>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<identifier>x</identifier>
</term>
<symbol>+<symbol>
<identifier>size</identifier>
</expression>
<symbol>,</symbol>
<expression>
<term>
<identifier>y</identifier>
</term>
<symbol>+<symbol>
<identifier>size</identifier>
</expression>
<symbol>,</symbol>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<letStatement>
<keyword>let</keyword>
<identifier>x</identifier>
<symbol>=</symbol>
<expression>
<term>
<identifier>x</identifier>
</term>
<symbol>-<symbol>
<integerConstant>2</integerConstant>
</expression>
<symbol>;</symbol>
</letStatement>
<doStatement>
<keyword>do</keyword>
<identifier>Screen</identifier>
<symbol>.</symbol>
<identifier>setColor</identifier>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<identifier>true</identifier>
</term>
</expression>
<symbol>,</symbol>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<doStatement>
<keyword>do</keyword>
<identifier>Screen</identifier>
<symbol>.</symbol>
<identifier>drawRectangle</identifier>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<identifier>x</identifier>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<identifier>y</identifier>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<identifier>x</identifier>
</term>
<symbol>+<symbol>
<integerConstant>1</integerConstant>
</expression>
<symbol>,</symbol>
<expression>
<term>
<identifier>y</identifier>
</term>
<symbol>+<symbol>
<identifier>size</identifier>
</expression>
<symbol>,</symbol>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
</statements>
<symbol>}</symbol>
</ifStatement>
</statements>
</subroutineBody>
<subroutineDec>
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>moveRight</identifier>
<symbol>(</symbol>
</parameterList>
<symbol>)</symbol>
<subroutineBody>
<symbol>{</symbol>
<statements>
<ifStatement>
<keyword>if</keyword>
<symbol>(</symbol>
<expression>
<term>
<symbol>(</symbol>
<expression>
<term>
<identifier>x</identifier>
</term>
<symbol>+<symbol>
<identifier>size</identifier>
</expression>
<symbol>)</symbol>
</term>
<symbol><<symbol>
<integerConstant>510</integerConstant>
</expression>
<symbol>)</symbol>
<symbol>{</symbol>
<statements>
<doStatement>
<keyword>do</keyword>
<identifier>Screen</identifier>
<symbol>.</symbol>
<identifier>setColor</identifier>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<identifier>false</identifier>
</term>
</expression>
<symbol>,</symbol>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<doStatement>
<keyword>do</keyword>
<identifier>Screen</identifier>
<symbol>.</symbol>
<identifier>drawRectangle</identifier>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<identifier>x</identifier>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<identifier>y</identifier>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<identifier>x</identifier>
</term>
<symbol>+<symbol>
<integerConstant>1</integerConstant>
</expression>
<symbol>,</symbol>
<expression>
<term>
<identifier>y</identifier>
</term>
<symbol>+<symbol>
<identifier>size</identifier>
</expression>
<symbol>,</symbol>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<letStatement>
<keyword>let</keyword>
<identifier>x</identifier>
<symbol>=</symbol>
<expression>
<term>
<identifier>x</identifier>
</term>
<symbol>+<symbol>
<integerConstant>2</integerConstant>
</expression>
<symbol>;</symbol>
</letStatement>
<doStatement>
<keyword>do</keyword>
<identifier>Screen</identifier>
<symbol>.</symbol>
<identifier>setColor</identifier>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<identifier>true</identifier>
</term>
</expression>
<symbol>,</symbol>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<doStatement>
<keyword>do</keyword>
<identifier>Screen</identifier>
<symbol>.</symbol>
<identifier>drawRectangle</identifier>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<symbol>(</symbol>
<expression>
<term>
<identifier>x</identifier>
</term>
<symbol>+<symbol>
<identifier>size</identifier>
</expression>
<symbol>)</symbol>
</term>
<symbol>-<symbol>
<integerConstant>1</integerConstant>
</expression>
<symbol>,</symbol>
<expression>
<term>
<identifier>y</identifier>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<identifier>x</identifier>
</term>
<symbol>+<symbol>
<identifier>size</identifier>
</expression>
<symbol>,</symbol>
<expression>
<term>
<identifier>y</identifier>
</term>
<symbol>+<symbol>
<identifier>size</identifier>
</expression>
<symbol>,</symbol>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
</statements>
<statements>
<doStatement>
<keyword>do</keyword>
<identifier>Screen</identifier>
<symbol>.</symbol>
<identifier>setColor</identifier>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<identifier>false</identifier>
</term>
</expression>
<symbol>,</symbol>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<doStatement>
<keyword>do</keyword>
<identifier>Screen</identifier>
<symbol>.</symbol>
<identifier>drawRectangle</identifier>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<identifier>x</identifier>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<identifier>y</identifier>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<identifier>x</identifier>
</term>
<symbol>+<symbol>
<integerConstant>1</integerConstant>
</expression>
<symbol>,</symbol>
<expression>
<term>
<identifier>y</identifier>
</term>
<symbol>+<symbol>
<identifier>size</identifier>
</expression>
<symbol>,</symbol>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<letStatement>
<keyword>let</keyword>
<identifier>x</identifier>
<symbol>=</symbol>
<expression>
<term>
<identifier>x</identifier>
</term>
<symbol>+<symbol>
<integerConstant>2</integerConstant>
</expression>
<symbol>;</symbol>
</letStatement>
<doStatement>
<keyword>do</keyword>
<identifier>Screen</identifier>
<symbol>.</symbol>
<identifier>setColor</identifier>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<identifier>true</identifier>
</term>
</expression>
<symbol>,</symbol>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<doStatement>
<keyword>do</keyword>
<identifier>Screen</identifier>
<symbol>.</symbol>
<identifier>drawRectangle</identifier>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<symbol>(</symbol>
<expression>
<term>
<identifier>x</identifier>
</term>
<symbol>+<symbol>
<identifier>size</identifier>
</expression>
<symbol>)</symbol>
</term>
<symbol>-<symbol>
<integerConstant>1</integerConstant>
</expression>
<symbol>,</symbol>
<expression>
<term>
<identifier>y</identifier>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<identifier>x</identifier>
</term>
<symbol>+<symbol>
<identifier>size</identifier>
</expression>
<symbol>,</symbol>
<expression>
<term>
<identifier>y</identifier>
</term>
<symbol>+<symbol>
<identifier>size</identifier>
</expression>
<symbol>,</symbol>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
</statements>
<symbol>}</symbol>
</ifStatement>
</statements>
</subroutineBody>n<symbol>}</symbol>
</class>